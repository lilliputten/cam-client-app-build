{"version":3,"sources":["App/logo.svg","config/index.js","config/build.js","config/css.js","serviceWorker.js","App/App.tsx","index.tsx"],"names":["module","exports","config","build","require","css","isDevServer","hot","isTesting","jest","DEBUG","Object","assign","theme","testColor","Boolean","window","location","hostname","match","cnApp","cn","console","log","App","className","dark","src","logo","alt","Button","variant","color","href","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,sGCO3C,IAAMC,EAAS,CACbC,MAAOC,EAAQ,KACfC,IAAKD,EAAQ,MAgBfJ,EAAOC,QAAUC,G,qBCzBjB,YAOA,IAAMI,GAA+CN,EAAOO,KAAV,GAC5CC,EAA6B,kBAATC,KACpBC,EAAQF,EAAY,OAASF,EAEnCN,EAAOC,QAAU,CAEfK,cACAE,YACAE,W,wCCVF,IAQIL,EAAMM,OAAOC,OAAO,GAPZ,GAOuB,CASjCC,MAjBc,UAqBdC,UAAW,SA8Ibd,EAAOC,QAAUI,G,yGC5JGU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+CCHAC,G,OAAQC,aAAG,QAETlB,EAAUC,EAAQ,KAAlBD,MAIRmB,QAAQC,IAAI,eAAgBpB,EAAMG,aAkCnBkB,MA9Bf,WACE,OACE,yBAAKC,UAAWL,EAAM,CAAEM,MAAM,KAC5B,4BAAQD,UAAWL,EAAM,WACvB,yBAAKO,IAAKC,IAAMH,UAAWL,EAAM,QAASS,IAAI,SAC9C,mCACO,6CADP,wBAaA,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,KAAK,uBAHP,kBCvBRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SF2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"assets/js/main.8f22dafe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"assets/media/logo.5d5d9eef.svg\";","/** @module config\n *  @description App config\n *  @since 2020.10.21, 01:44\n *  @changed 2020.10.21, 03:26\n */\n/* eslint-disable global-require */\n\nconst config = {\n  build: require('./build'),\n  css: require('./css'),\n  // app: require('./app'),\n  // constants: require('./constants'),\n  // limits: require('./limits'),\n  // userAgent: require('./userAgent'),\n  // core: require('./core'),\n  // components: require('./components'),\n  // ui: require('./ui'),\n};\n\n/* // Export to global scope // Is it necessary?\n * if (typeof window === 'object') { // Use webpack's `global`?\n *   window.config = config\n * }\n */\n\nmodule.exports = config;\n\n// module.exports = config;\n// module.exports.site = site;\n// module.exports.css = css;\n","/** @module config.build\n *  @since 2020.10.21, 01:44\n *  @changed 2020.10.21, 03:26\n */\n\n// const DEBUG = process.env.DEBUG\n\nconst isDevServer = typeof module === 'object' && !!(module.hot && module.hot.active); // From `config.build.isDevServer`\nconst isTesting = (typeof jest === 'object');\nconst DEBUG = isTesting ? 'test' : isDevServer;\n\nmodule.exports = { // Common-used build variables...\n\n  isDevServer,\n  isTesting,\n  DEBUG,\n\n  // THEME: process.env.THEME,\n  // buildTag: process.env.buildTag,\n  // version: process.env.version,\n\n};\n","/** @module config.css\n *  @since 2020.10.21, 03:25\n *  @changed 2020.10.21, 04:34\n */\n\nvar themeName = 'default'; // process.env.THEME;\nvar theme = {}; // require(process.env.THEME_FILE);\n\n// var defaultFontSize = theme.defaultFontSize || 20;\n// var formItemSize = 48;\n// var defaultTransitonTime = 250;\n// var defaultAnimateTimeout = 0; // 250;\n\nvar css = Object.assign({}, theme, {\n\n  // // Build props:\n  //\n  // isDemo: process.env.isDemo,\n  // isDevMode: process.env.isDev,\n\n  // Theme...\n\n  theme: themeName,\n\n  // DEBUG\n\n  testColor: '#f00', // DEBUG\n\n  /* // Old css config (sample)...\n   * // Icons\n   *\n   * defaultIconSize: 18,\n   * largeIconSize: 24,\n   * iconSpritePrefix: 'sprite',\n   *\n   * defaultButtonStyle: 'default',\n   * activeButtonStyle: 'defaultDark',\n   *\n   * errorIcon: 'alert',\n   * infoIcon: 'light-bulb',\n   * queryIcon: 'help-alt',\n   * successIcon: 'check',\n   * warnIcon: 'bolt',\n   *\n   * // Colors...\n   *\n   * testColor: '#f00', // DEBUG\n   *\n   * // Colors for dialogs styles\n   * confirmColor: theme.confirmColor || theme.primaryColor || '#ac9',\n   * errorColor: theme.errorColor || '#c33',\n   * infoColor: theme.infoColor || '#9bd',\n   * queryColor: theme.infoColor || '#9bd',\n   * successColor: theme.successColor || '#ac9',\n   * warnColor: theme.warnColor || '#f96',\n   *\n   * // textColor,\n   * defaultTextColor: theme.textColor || '#333',\n   *\n   * // primaryColor,\n   * // primaryLightColor,\n   * // primaryDarkColor,\n   * // primaryContrastColor,\n   *\n   * // secondaryColor,\n   * // secondaryLightColor,\n   * // secondaryDarkColor,\n   * // secondaryContrastColor,\n   *\n   * neutralColor: '#bbb',\n   * neutralDarkColor: '#999',\n   * neutralSuperDarkColor: '#777',\n   * neutralLightColor: '#ddd',\n   * neutralSuperLightColor: '#eee',\n   *\n   * bodyBgColor: theme.bodyBgColor || '#000',\n   * bodyTextColor: theme.bodyTextColor || '#999',\n   * layoutBgColor: theme.layoutBgColor || '#f0f0f0',\n   * layoutLightBgColor: theme.layoutLightBgColor || '#f7f7f7',\n   *\n   * layoutBorderColor: theme.layoutBorderColor || '#ccc',\n   *\n   * // // See XD prototypes...\n   * // primarySuperLightColor: '#e0ebf3',\n   * // primaryBrightColor: '#bce0fd',\n   *\n   * // Fonts...\n   *\n   * defaultFont: theme.defaultFont || 'sans-serif',\n   * // defaultFont: theme.defaultFont || 'Helvetica, Arial, sans-serif',\n   * // defaultFont: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\n   * // defaultFont: 'sans-serif',\n   *\n   * defaultFontSize: defaultFontSize,\n   * fontSize: defaultFontSize,\n   * fontSizeM: defaultFontSize,\n   * fontSizeSm: defaultFontSize - 2,\n   * fontSizeXs: defaultFontSize - 4,\n   * fontSizeLg: defaultFontSize + 2,\n   * fontSizeXl: defaultFontSize + 4,\n   * fontSizeXxl: defaultFontSize + 8,\n   * titleFontSize: defaultFontSize + 8,\n   * defaultLineHeight: 1.6,\n   * // defaultFontWeight: 400,\n   * defaultFontWeight: 'normal',\n   * // defaultFontWeight: 500,\n   * // defaultBemFontSize: defaultFontSize,\n   *\n   * // Breakpoints (from bootstrap)\n   * breakpoint_xs: 0,\n   * breakpoint_sm_pre: 575.98,\n   * breakpoint_sm: 576,\n   * breakpoint_md_pre: 767.98,\n   * breakpoint_md: 768,\n   * breakpoint_lg_pre: 991.98,\n   * breakpoint_lg: 992,\n   * breakpoint_xl_pre: 1199.98,\n   * breakpoint_xl: 1200,\n   *\n   * // Timeouts & delays...\n   *\n   * transitionTime: defaultTransitonTime, // ms\n   *\n   * animateTimeout: defaultAnimateTimeout, // ms\n   * modalAnimateTimeout: defaultAnimateTimeout, // 350, // ms\n   *\n   * // Forms...\n   *\n   * formItemSize: formItemSize,\n   * formItemHeight: formItemSize,\n   * formLabelPadding: theme.formLabelPadding || 300,\n   * formLabelCollapse: theme.formLabelCollapse || 600,\n   *\n   * // MainPage\n   *\n   * mainPageElemsRadius: 5,\n   * mainPageElemsSpacing: 10,\n   *\n   * mainPageTitleHeight: 50,\n   *\n   * // Loader:Progress\n   *\n   * progressTimerDelay: 1000, // JS timer delay for progressbar updaing\n   * progressUpdateDelay: 300, // CSS animation time; for HP devices must be less or equal than JS delay due to animation performance issues\n   * progressbarBorder: 5,\n   * progressbarHeight: 10,\n   * progressbarBgColor: '#222',\n   * progressbarColor: theme.primaryColor,\n   *\n   * // Paddings & spacings...\n   *\n   * itemPadding: 5,\n   * innerPadding: 10,\n   * containerPadding: 15,\n   * blockPadding: 20,\n   *\n   * // OpParams\n   *\n   * // BasicPage occupies full screen height\n   * fullScreenBasicPage: true,\n   *\n   * // Scrolls\n   *\n   * scrollSize: 10,\n   */\n\n});\n\nmodule.exports = css;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** @module App\n *  @since 2020.10.18, 21:16\n *  @changed 2020.10.21, 01:39\n */\n\nimport React from 'react';\n\nimport { Button } from '@material-ui/core';\n\nimport logo from './logo.svg';\n\nimport { cn } from '@bem-react/classname';\n\nimport './App.pcss';\n\nconst cnApp = cn('App');\n\nconst { build } = require('config');\n\n\n// DEBUG:\nconsole.log('isDevServer:', build.isDevServer);\n// debugger;\n\n\nfunction App() {\n  return (\n    <div className={cnApp({ dark: false })}>\n      <header className={cnApp('header')}>\n        <img src={logo} className={cnApp('logo')} alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        {/*\n        <a\n          className={cnApp('link')}\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        */}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          href=\"https://reactjs.org\"\n        >\n          Hello World\n        </Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/** @module index\n *  @since 2020.10.18, 21:16\n *  @changed 2020.10.18, 22:17\n */\n\nimport 'es5-shim/es5-shim';\nimport 'es5-shim/es5-sham';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.pcss';\n\nimport App from 'App/App'; // Worked\n// import App from 'App'; // Must works with directory-resolver (TODO!)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}